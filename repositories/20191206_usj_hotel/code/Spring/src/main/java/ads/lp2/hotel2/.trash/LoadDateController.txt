package ads.lp2.hotel2.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import ads.lp2.hotel2.model.quarto.QuartoController;
import ads.lp2.hotel2.model.reserva.Reserva;

@RequestMapping
@Controller
public class LoadDateController {

    // ReservaResource reservaResource;
    String date;

    @RequestMapping("/LoadDate")
    @ResponseBody
    public ModelAndView LoadDate(HttpServletRequest request, HttpServletResponse response)
            throws Exception {

        P(">>--==> Open session");
        HttpSession session = request.getSession(true);

        P(">>--==> Build date");
        date = request.getParameter("DATE");
        LocalDate userLocalDate = parseStringToLocalDate(date, "yyyy-MM-dd");
        date = parseLocalDateToString(userLocalDate, "yyyy-MM-dd");
        P(">>--==> Build date: " + date); 

        P(">>--==> Load list");
        // reservaResource = new ReservaResource();
        List<Reserva> reservas;

        P(">>--==> Start try{catch} to DB");
        try {
            // reservas = reservaResource.findAllReservas();
            for (Reserva reserva : reservas) {
                if (!reserva.getDataDia().equals(date) || !reserva.getFinalizacao() == true) {
                    P(">>--==> Removing the trash data");
                    reservas.remove(reserva);
                } 
            }
        } catch (Exception e) {
            P(">>--==> error to load List at DB");
            P(">>--==> error: " + e);
            P(">>--==> Build an empty List");
            reservas = new ArrayList<>();
        }

        P(">>--==> Setting session");
        session.setAttribute("DATE", date);
        session.setAttribute("LIST", reservas);
        P(">>--==> DATE: " + session.getAttribute("DATE"));
        P(">>--==> LIST: " + session.getAttribute("LIST"));

        P(">>--==> Returning");
        P(">>--------======>");
        return new ModelAndView("/dataatual");
 
    }

    @RequestMapping("/DateLoadToday")
    @ResponseBody
    public ModelAndView DateLoadToday(HttpServletRequest request, HttpServletResponse response) throws Exception {

        // P(">>--==> Iniciando o sistema de quartos!");
        // QuartoController QuartoController = new QuartoController();
        // QuartoController.buildRooms();

        P(">>--==> Open session");
        HttpSession session = request.getSession(true);

        P(">>--==> Build date");
        LocalDate LocalDateNow = LocalDate.now();
        date = parseLocalDateToString(LocalDateNow, "yyyy-MM-dd");
        P(">>--==> Build date: " + date);

        P(">>--==> Load list");
        reservaResource = new ReservaResource();
        List<Reserva> reservas;

        P(">>--==> DB try{catch}");
        try {
            reservas = reservaResource.findAllReservas();
            P(">>--==> DB success to load data");
            for (Reserva reserva : reservas) {
                P(">>--==> DB cleaning data");
                if (!reserva.getDataDia().equals(date) || !reserva.getFinalizacao() == true) {
                    P(">>--==> DB finish!");
                    reservas.remove(reserva);
                }
            }
        } catch (Exception e) {
            P(">>--==> DB error to load load data");
            P(">>--==> DB error: " + e);
            P(">>--==> Build an empty List");
            reservas = new ArrayList<>();
        }

        P(">>--==> Setting session");
        session.setAttribute("DATE", date);
        session.setAttribute("LIST", reservas);
        P(">>--==> DATE: " + session.getAttribute("DATE"));
        P(">>--==> LIST: " + session.getAttribute("LIST"));

        P(">>--==> Returning");
        P(">>--------======>");
        return new ModelAndView("/dataatual");

    }

    public void P(String string) {
        System.out.println(string);
    }

    public Date parseStringToDate(String date, String type) throws ParseException {
        Date newDate = new SimpleDateFormat(type).parse(date);
        return newDate;
    }

    public LocalDate parseStringToLocalDate(String date, String type) {
        DateTimeFormatter format = DateTimeFormatter.ofPattern(type);
        LocalDate parsing = LocalDate.parse(date, format);
        return parsing;
    }

    public String parseLocalDateToString(LocalDate localDateNow, String type) {
        String formattedDate = localDateNow.format(DateTimeFormatter.ofPattern(type));
        return formattedDate;
        // return localDateNow.toString();
    }

    // //
    // //
    // //
    // public LocalDate parseDateToLocalDate(String date, String type) {
    //     DateTimeFormatter format;
    //     format = DateTimeFormatter.ofPattern(type);
    //     return LocalDate.parse(date, format);
    // }

    // public String parseDateToString(Date date, String type) {
    //     String pattern = type;
    //     DateFormat dateFormat = new SimpleDateFormat(pattern);
    //     // Date today = Calendar.getInstance().getTime();
    //     String todayAsString = dateFormat.format(date);
    //     return todayAsString;
    // }

}